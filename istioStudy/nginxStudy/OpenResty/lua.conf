    #lua.conf

    server {

        listen       8091;

        server_name  _;

        #first match ngx location
        set $template_location "/home/xiaodong/tools/server1-nginx/nginx/conf/templates2";
        #then match root read file
        set $template_root "/home/xiaodong/tools/server1-nginx/nginx/conf/templates";

        location /openresty {

            default_type text/html;
            content_by_lua '
                ngx.say("<p>Hello world from Lua!</p>")
            ';
        }


        location /lua {
            default_type 'text/html';
            content_by_lua_file conf/lua/test.lua; #相对于nginx安装目录
        }

        # request demo
        # test - http://k8s-master:8091/lua_request/1/2?a=3&b=4
        location ~ /lua_request/(\d+)/(\d+) {
            #设置nginx变量
            set $a $1;
            set $b $host;
            default_type "text/html";
            #nginx内容处理
            content_by_lua_file conf/lua/test_request.lua;
            #内容体处理完成后调用
            echo_after_body "ngx.var.b $b";


        }

        # response demo
        # test - http://k8s-master:8091/lua_response_1
        location /lua_response_1 {
            default_type "text/html";
            content_by_lua_file conf/lua/test_response_1.lua;


        }

        # response demo
        # test - http://k8s-master:8091/lua_response_2
        location /lua_response_2 {
            default_type "text/html";
            content_by_lua_file conf/lua/test_response_2.lua;
        }

        # 全局共享内存
        # test - http://k8s-master:8091/lua_shared_dict
        location /lua_shared_dict {
            default_type "text/html";
            content_by_lua_file conf/lua/test_lua_shared_dict.lua;
        }

        # set_by_lua
        # http://k8s-master:8091/lua_set_1?i=1&j=10
        location /lua_set_1 {
            default_type "text/html";
            set_by_lua_file $num conf/lua/test_set_1.lua;
            echo $num;

        }

        # rewrite by lua
        # test - http://k8s-master:8091/lua_rewrite_1?jump=1 (jump)
        # test - http://k8s-master:8091/lua_rewrite_1 (no jump)
        location /lua_rewrite_1 {
            default_type "text/html";
            rewrite_by_lua_file conf/lua/test_rewrite_1.lua;
            echo "no rewrite";
        }

        # access_by_lua
        # test - http://k8s-master:8091/lua_access?token=234将得到403 Forbidden的响应
        # test - http://k8s-master:8091/lua_access?token=123 pass
        location /lua_access {
            default_type "text/html";
            access_by_lua_file conf/lua/test_access.lua;
            echo "access authorized.";
        }

        # lua module mechanism
        # lualib directory contains module/service files
        # lua directory contains controller files
        # lua.conf location section route to the controller files which call module/service files
        # test - http://k8s-master:8091/lua_module_1
        location /lua_module_1 {
            default_type 'text/html';
            lua_code_cache on;
            content_by_lua_file conf/lua/test_module_1.lua;
        }

        # test redis
        # test - http://k8s-master:8091/lua_redis_basic
        location /lua_redis_basic {
            default_type 'text/html';
            lua_code_cache on;
            content_by_lua_file conf/lua/test_redis_basic.lua;
        }

        # test mysql
        # test - http://k8s-master:8091/lua_mysql?ch=hello
        # 准备环境
        # mkdir -p /home/xiaodong/docker_data/mysql_data
        # docker run --name xdmysql -p 3306:3306 -v /home/xiaodong/docker_data/mysql_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD='time4@FUN' -d mysql
        location /lua_mysql {
           default_type 'text/html';
           lua_code_cache on;
           content_by_lua_file conf/lua/test_mysql.lua;
        }

        # test cjson
        # test - http://k8s-master:8091/lua_cjson
        location ~ /lua_cjson {
           default_type 'text/html';
           lua_code_cache on;
           content_by_lua_file conf/lua/test_cjson.lua;
        }



        location /templates {
             internal;
             alias conf/templates2;
        }


        # test - http://k8s-master:8091/lua_template_1
        location /lua_template_1 {
            default_type 'text/html';
            lua_code_cache on;
            content_by_lua_file conf/lua/test_template_1.lua;
        }

        location /lua_template_2 {
            default_type 'text/html';
            lua_code_cache on;
            content_by_lua_file conf/lua/test_template_2.lua;
        }

        # test - http://k8s-master:8091/lua_template_3
        location /lua_template_3 {
            default_type 'text/html';
            lua_code_cache on;
            content_by_lua_file conf/lua/test_template_3.lua;
        }


        # 用来进行协程的测试
        location /api1 {
            echo_sleep 3;
            echo api1 : $arg_a;
        }

        location /api2 {
            echo_sleep 3;
            echo api2 : $arg_a;
        }

        # 串行访问api1 & api2
        # http://k8s-master:8091/serial?a=25
        location /serial {
            content_by_lua '
                local t1 = ngx.now()
                local res1 = ngx.location.capture("/api1", {args = ngx.req.get_uri_args()})
                local res2 = ngx.location.capture("/api2", {args = ngx.req.get_uri_args()})
                local t2 = ngx.now()
                ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
            ';
        }

        # ngx.location.capture_multi的并行实现
        # http://k8s-master:8091/concurrency1?a=28
        location /concurrency1 {
            content_by_lua '
                local t1 = ngx.now()
                local res1,res2 = ngx.location.capture_multi({
                      {"/api1", {args = ngx.req.get_uri_args()}},
                      {"/api2", {args = ngx.req.get_uri_args()}}

                })
                local t2 = ngx.now()
                ngx.say("this is by ngx.location.capture_multi","<br/>")
                ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
            ';
        }

        # ngx.thread.spawn 协程API实现
        # http://k8s-master:8091/concurrency2?a=28
        location /concurrency2 {
            content_by_lua '
                local t1 = ngx.now()
                local function capture(uri, args)
                   return ngx.location.capture(uri, args)
                end
                local thread1 = ngx.thread.spawn(capture, "/api1", {args = ngx.req.get_uri_args()})
                local thread2 = ngx.thread.spawn(capture, "/api2", {args = ngx.req.get_uri_args()})
                local ok1, res1 = ngx.thread.wait(thread1)
                local ok2, res2 = ngx.thread.wait(thread2)
                local t2 = ngx.now()
                ngx.say("this is by ngx.location.capture ...","<br/>")
                ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
            ';
        }




    }